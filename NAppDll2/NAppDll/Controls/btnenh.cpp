// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "btnenh.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh1

IMPLEMENT_DYNCREATE(CBtnEnh1, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh1 properties

CString CBtnEnh1::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

short CBtnEnh1::GetShape()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetShape(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CBtnEnh1::GetRoundness()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetRoundness(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CBtnEnh1::GetSlant()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetSlant(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CBtnEnh1::GetSurface()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetSurface(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

unsigned long CBtnEnh1::GetPictureTranspColor()
{
	unsigned long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureTranspColor(unsigned long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

CString CBtnEnh1::GetSoundDown()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetSoundDown(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CBtnEnh1::GetSoundUp()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetSoundUp(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CBtnEnh1::GetCursor()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetCursor(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CBtnEnh1::GetSoundMouseOver()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetSoundMouseOver(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

CString CBtnEnh1::GetSoundMouseOut()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetSoundMouseOut(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

COleFont1 CBtnEnh1::GetFontTextLT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x10, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextLT(LPDISPATCH propVal)
{
	SetProperty(0x10, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextCT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x11, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextCT(LPDISPATCH propVal)
{
	SetProperty(0x11, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextRT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x12, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextRT(LPDISPATCH propVal)
{
	SetProperty(0x12, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextLM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x13, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextLM(LPDISPATCH propVal)
{
	SetProperty(0x13, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextRM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x14, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextRM(LPDISPATCH propVal)
{
	SetProperty(0x14, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextLB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x15, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextLB(LPDISPATCH propVal)
{
	SetProperty(0x15, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextCB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x16, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextCB(LPDISPATCH propVal)
{
	SetProperty(0x16, VT_DISPATCH, propVal);
}

COleFont1 CBtnEnh1::GetFontTextRB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x17, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextRB(LPDISPATCH propVal)
{
	SetProperty(0x17, VT_DISPATCH, propVal);
}

CString CBtnEnh1::GetPicture()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetPicture(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CBtnEnh1::GetPicturePressed()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetPicturePressed(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CBtnEnh1::GetPictureMouseOver()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureMouseOver(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CBtnEnh1::GetPictureCustom()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureCustom(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

short CBtnEnh1::GetPicturePosition()
{
	short result;
	GetProperty(0x18, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetPicturePosition(short propVal)
{
	SetProperty(0x18, VT_I2, propVal);
}

short CBtnEnh1::GetPictureXOffset()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureXOffset(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

short CBtnEnh1::GetPictureYOffset()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureYOffset(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

BOOL CBtnEnh1::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CBtnEnh1::GetPictureTranspMode()
{
	short result;
	GetProperty(0x1b, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureTranspMode(short propVal)
{
	SetProperty(0x1b, VT_I2, propVal);
}

BOOL CBtnEnh1::GetButtonCustomRaised()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetButtonCustomRaised(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

unsigned long CBtnEnh1::GetBackColorContainer()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetBackColorContainer(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

BOOL CBtnEnh1::GetMovePictureOnPress()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetMovePictureOnPress(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

short CBtnEnh1::GetButtonRaiseFactor()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetButtonRaiseFactor(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}

unsigned long CBtnEnh1::GetHighlightColor()
{
	unsigned long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetHighlightColor(unsigned long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

unsigned long CBtnEnh1::GetShadowColor()
{
	unsigned long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetShadowColor(unsigned long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

BOOL CBtnEnh1::GetButtonCustomFitPicture()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetButtonCustomFitPicture(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

OLE_HANDLE CBtnEnh1::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

COleFont1 CBtnEnh1::GetFontTextCaption()
{
	LPDISPATCH pDispatch;
	GetProperty(0x23, VT_DISPATCH, (void*)&pDispatch);
	return COleFont1(pDispatch);
}

void CBtnEnh1::SetFontTextCaption(LPDISPATCH propVal)
{
	SetProperty(0x23, VT_DISPATCH, propVal);
}

CString CBtnEnh1::GetHyperlink()
{
	CString result;
	GetProperty(0x24, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetHyperlink(LPCTSTR propVal)
{
	SetProperty(0x24, VT_BSTR, propVal);
}

BOOL CBtnEnh1::GetEnableInternetLoadAtDT()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetEnableInternetLoadAtDT(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

short CBtnEnh1::GetSmoothEdges()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetSmoothEdges(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

CString CBtnEnh1::GetTagEx()
{
	CString result;
	GetProperty(0x26, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh1::SetTagEx(LPCTSTR propVal)
{
	SetProperty(0x26, VT_BSTR, propVal);
}

BOOL CBtnEnh1::GetPictureKeepRatio()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetPictureKeepRatio(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

short CBtnEnh1::GetFocusMode()
{
	short result;
	GetProperty(0x28, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetFocusMode(short propVal)
{
	SetProperty(0x28, VT_I2, propVal);
}

short CBtnEnh1::GetSpecialEffect()
{
	short result;
	GetProperty(0x29, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetSpecialEffect(short propVal)
{
	SetProperty(0x29, VT_I2, propVal);
}

short CBtnEnh1::GetCaptionWordWrapPerc()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetCaptionWordWrapPerc(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

short CBtnEnh1::GetOptimization()
{
	short result;
	GetProperty(0x2b, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh1::SetOptimization(short propVal)
{
	SetProperty(0x2b, VT_I2, propVal);
}

BOOL CBtnEnh1::GetClickable()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh1::SetClickable(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

unsigned long CBtnEnh1::GetBackColor()
{
	unsigned long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetBackColor(unsigned long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

unsigned long CBtnEnh1::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh1::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh1 operations

void CBtnEnh1::SetAuxText(short position, LPCTSTR text, unsigned long color, unsigned long colorMouseOver, short xOffset, short yOffset, short iEffect, short nFactor)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_I4 VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 position, text, color, colorMouseOver, xOffset, yOffset, iEffect, nFactor);
}

LPUNKNOWN CBtnEnh1::GetControlPtr()
{
	LPUNKNOWN result;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

void CBtnEnh1::EnableSound(short nSound, BOOL bEnable)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSound, bEnable);
}

void CBtnEnh1::DoClick()
{
	InvokeHelper(DISPID_DOCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh1::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh1::SetNSContainerColor(unsigned long color)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 color);
}

CString CBtnEnh1::GetAuxText(short position, unsigned long* pcolor, unsigned long* pcolorMouseOver, short* pxOffset, short* pyOffset, short* piEffect, short* pnFactor)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		position, pcolor, pcolorMouseOver, pxOffset, pyOffset, piEffect, pnFactor);
	return result;
}

long CBtnEnh1::SetPictureFromHandle(short index, long hBmp)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, hBmp);
	return result;
}

long CBtnEnh1::SetPictureFromMemory(short index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

long CBtnEnh1::SetAviFromMemory(short index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT VTS_I4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

long CBtnEnh1::SetCursorFromHandle(long hCursor)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hCursor);
	return result;
}

long CBtnEnh1::SetSoundFromMemory(short index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

void CBtnEnh1::SetAutomaticRefresh(BOOL bAutoRefresh)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bAutoRefresh);
}

void CBtnEnh1::SetSoundSync(short sound, BOOL flag)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 sound, flag);
}

void CBtnEnh1::EnableAcceleratorForVB()
{
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh1::SetTextVisible(short nText, BOOL bVisible)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nText, bVisible);
}

void CBtnEnh1::SetCaptionText(LPCTSTR text, unsigned long color, unsigned long colorMouseOver, short xOffset, short yOffset, short iEffect, short nFactor, short nAngle)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 text, color, colorMouseOver, xOffset, yOffset, iEffect, nFactor, nAngle);
}

CString CBtnEnh1::GetCaptionText(unsigned long* pcolor, unsigned long* pcolorMouseOver, short* pxOffset, short* pyOffset, short* piEffect, short* pnFactor, short* pnAngle)
{
	CString result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		pcolor, pcolorMouseOver, pxOffset, pyOffset, piEffect, pnFactor, pnAngle);
	return result;
}

long CBtnEnh1::SetPictureFromNet(short index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

long CBtnEnh1::SetSoundFromNet(short index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

BOOL CBtnEnh1::SetAviFromNet(short index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

void CBtnEnh1::SetSurfaceColor(short nElement, unsigned long color, short nGradientFactor, short nRender3D)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nElement, color, nGradientFactor, nRender3D);
}

void CBtnEnh1::MouseCapture(BOOL bCapture)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bCapture);
}

void CBtnEnh1::GetSurfaceColor(short nElement, unsigned long* pcolor, short* pnGradientFactor, short* pnRender3D)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI2 VTS_PI2;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nElement, pcolor, pnGradientFactor, pnRender3D);
}

void CBtnEnh1::InternalRefresh()
{
	InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
